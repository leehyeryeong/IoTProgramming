// Firebase 초기화
const firebaseConfig = {
  apiKey: "AIzaSyDXz0ksdfYD5Rt4P4y8e1YIbbgr8OBhZlw",
  authDomain: "test-6d110.firebaseapp.com",
  databaseURL: "https://test-6d110-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId: "test-6d110",
  storageBucket: "test-6d110.firebasestorage.app",
  messagingSenderId: "1066690464338",
  appId: "1:1066690464338:web:14f34baa5953317fa82d8b"
};

// Firebase 초기화
firebase.initializeApp(firebaseConfig);
const database = firebase.database();

// LED 제어 함수들
function ledON() {
  console.log("LED ON");
  document.getElementById("img").src = "ledOn.png"; // 즉시 반영
  database.ref('led').set({ led: 1 });
}

function ledOFF() {
  console.log("LED OFF");
  document.getElementById("img").src = "ledOff.png"; // 즉시 반영
  database.ref('led').set({ led: 0 });
}

// LED 상태 변경 감지
database.ref('led').on('value', function(snapshot) {
  const val = snapshot.val();
  if (val && val.led === 0) {
    document.getElementById("img").src = "ledOff.png";
  } else {
    document.getElementById("img").src = "ledOn.png";
  }
  console.log(val);
});

// 센서 정보 업데이트 함수
function updateSensorInfo(data) {
  if (!data) return;
  if (data.temp !== undefined) {
    document.getElementById("temp").textContent = data.temp.toFixed(2);
  }
  if (data.humidity !== undefined) {
    document.getElementById("humidity").textContent = data.humidity.toFixed(2);
  }
  if (data.pressure !== undefined) {
    document.getElementById("pressure").textContent = data.pressure.toFixed(2);
  }
  if (data.gyro !== undefined) {
    // 자이로가 객체나 배열일 수 있으니 JSON 문자열로 표시
    document.getElementById("gyro").textContent = typeof data.gyro === 'string' ? data.gyro : JSON.stringify(data.gyro);
  }
  if (data.accel !== undefined) {
    // 가속도도 마찬가지로 문자열화 처리
    document.getElementById("accel").textContent = typeof data.accel === 'string' ? data.accel : JSON.stringify(data.accel);
  }
  if (data.last_update !== undefined) {
    document.getElementById("last-update").textContent = data.last_update;
  }
}

// 센서 데이터 변경 감지 (복수 필드 한번에 받는다고 가정)
database.ref('sensor').on('value', function(snapshot) {
  const data = snapshot.val();
  updateSensorInfo(data);
});

// 메시지 전송 함수
function sendMessage() {
  const chatInput = document.getElementById("chatInput");
  const message = chatInput.value.trim();

  if (message) {
    // 웹 매트릭스에서 자연스러운 흐름 애니메이션 실행
    startScrollingTextOnWebMatrix(message, 150);

    // Firebase에 메시지 저장 (Sense HAT가 읽음)
    database.ref('message').set({ text: message });

    chatInput.value = '';
  }
}
function checkEnter(event) {
  if (event.key === 'Enter') {
    sendMessage();
  }
}

// 8x8 픽셀 폰트 예시 (필요시 확장)
const font8x8 = {
  ' ': [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
  'A': [0x18,0x24,0x42,0x7E,0x42,0x42,0x42,0x00],
  'B': [0x7C,0x42,0x42,0x7C,0x42,0x42,0x7C,0x00],
  'C': [0x3C,0x42,0x40,0x40,0x40,0x42,0x3C,0x00],
  'D': [0x78,0x44,0x42,0x42,0x42,0x44,0x78,0x00],
  'E': [0x7E,0x40,0x40,0x7C,0x40,0x40,0x7E,0x00],
  'F': [0x7E,0x40,0x40,0x7C,0x40,0x40,0x40,0x00],
  'G': [0x3C,0x42,0x40,0x4E,0x42,0x42,0x3C,0x00],
  'H': [0x42,0x42,0x42,0x7E,0x42,0x42,0x42,0x00],
  'I': [0x7E,0x18,0x18,0x18,0x18,0x18,0x7E,0x00],
  'J': [0x1E,0x04,0x04,0x04,0x44,0x44,0x38,0x00],
  'K': [0x42,0x44,0x48,0x70,0x48,0x44,0x42,0x00],
  'L': [0x40,0x40,0x40,0x40,0x40,0x40,0x7E,0x00],
  'M': [0x42,0x66,0x5A,0x5A,0x42,0x42,0x42,0x00],
  'N': [0x42,0x62,0x52,0x4A,0x46,0x42,0x42,0x00],
  'O': [0x3C,0x42,0x42,0x42,0x42,0x42,0x3C,0x00],
  'P': [0x7C,0x42,0x42,0x7C,0x40,0x40,0x40,0x00],
  'Q': [0x3C,0x42,0x42,0x42,0x4A,0x44,0x3A,0x00],
  'R': [0x7C,0x42,0x42,0x7C,0x48,0x44,0x42,0x00],
  'S': [0x3C,0x42,0x30,0x0C,0x02,0x42,0x3C,0x00],
  'T': [0x7E,0x18,0x18,0x18,0x18,0x18,0x18,0x00],
  'U': [0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00],
  'V': [0x42,0x42,0x42,0x42,0x24,0x24,0x18,0x00],
  'W': [0x42,0x42,0x42,0x5A,0x5A,0x66,0x42,0x00],
  'X': [0x42,0x24,0x18,0x18,0x18,0x24,0x42,0x00],
  'Y': [0x42,0x24,0x18,0x18,0x18,0x18,0x18,0x00],
  'Z': [0x7E,0x04,0x08,0x10,0x20,0x40,0x7E,0x00],

  'a': [0x00,0x00,0x38,0x04,0x3C,0x44,0x3A,0x00],
  'b': [0x40,0x40,0x58,0x64,0x44,0x64,0x58,0x00],
  'c': [0x00,0x00,0x38,0x40,0x40,0x40,0x38,0x00],
  'd': [0x04,0x04,0x34,0x4C,0x44,0x4C,0x34,0x00],
  'e': [0x00,0x00,0x38,0x44,0x7C,0x40,0x38,0x00],
  'f': [0x0C,0x10,0x7C,0x10,0x10,0x10,0x10,0x00],
  'g': [0x00,0x00,0x3A,0x44,0x3C,0x04,0x38,0x00],
  'h': [0x40,0x40,0x58,0x64,0x44,0x44,0x44,0x00],
  'i': [0x10,0x00,0x30,0x10,0x10,0x10,0x38,0x00],
  'j': [0x04,0x00,0x0C,0x04,0x04,0x44,0x38,0x00],
  'k': [0x40,0x40,0x44,0x48,0x70,0x48,0x44,0x00],
  'l': [0x30,0x10,0x10,0x10,0x10,0x10,0x38,0x00],
  'm': [0x00,0x00,0x6C,0x54,0x54,0x54,0x54,0x00],
  'n': [0x00,0x00,0x58,0x64,0x44,0x44,0x44,0x00],
  'o': [0x00,0x00,0x38,0x44,0x44,0x44,0x38,0x00],
  'p': [0x00,0x00,0x78,0x44,0x78,0x40,0x40,0x00],
  'q': [0x00,0x00,0x34,0x4C,0x34,0x04,0x04,0x00],
  'r': [0x00,0x00,0x58,0x64,0x40,0x40,0x40,0x00],
  's': [0x00,0x00,0x3C,0x40,0x38,0x04,0x78,0x00],
  't': [0x10,0x10,0x7C,0x10,0x10,0x10,0x0C,0x00],
  'u': [0x00,0x00,0x44,0x44,0x44,0x4C,0x34,0x00],
  'v': [0x00,0x00,0x44,0x44,0x28,0x28,0x10,0x00],
  'w': [0x00,0x00,0x44,0x54,0x54,0x54,0x28,0x00],
  'x': [0x00,0x00,0x44,0x28,0x10,0x28,0x44,0x00],
  'y': [0x00,0x00,0x44,0x44,0x3C,0x04,0x38,0x00],
  'z': [0x00,0x00,0x7C,0x08,0x10,0x20,0x7C,0x00],

  '0': [0x3C,0x46,0x4A,0x52,0x62,0x42,0x3C,0x00],
  '1': [0x10,0x30,0x10,0x10,0x10,0x10,0x38,0x00],
  '2': [0x3C,0x42,0x04,0x08,0x10,0x20,0x7E,0x00],
  '3': [0x7E,0x04,0x08,0x1C,0x02,0x42,0x3C,0x00],
  '4': [0x08,0x18,0x28,0x48,0x7E,0x08,0x08,0x00],
  '5': [0x7E,0x40,0x7C,0x02,0x02,0x42,0x3C,0x00],
  '6': [0x1C,0x20,0x40,0x7C,0x42,0x42,0x3C,0x00],
  '7': [0x7E,0x02,0x04,0x08,0x10,0x10,0x10,0x00],
  '8': [0x3C,0x42,0x42,0x3C,0x42,0x42,0x3C,0x00],
  '9': [0x3C,0x42,0x42,0x3E,0x02,0x04,0x38,0x00],
};

// 글자 하나를 8x8 픽셀 배열로 변환
function getCharPixels(ch) {
  return font8x8[ch.toLowerCase()] || font8x8[' '];
}

// 문장 전체를 픽셀 배열로 변환 (세로 8, 가로 N픽셀)
function textToPixels(text) {
  const spaceBetweenChars = 1; // 글자 사이 1픽셀 공백
  let pixels = [];

  for (let i=0; i<8; i++) pixels[i] = [];

  for (const ch of text) {
    let charPixels = getCharPixels(ch);
    for (let row=0; row<8; row++) {
      for (let bit=7; bit>=0; bit--) {
        pixels[row].push((charPixels[row] >> bit) & 1);
      }
      for (let s=0; s<spaceBetweenChars; s++) {
        pixels[row].push(0);
      }
    }
  }
  return pixels;
}


// 8x8 matrix에 픽셀 그리기
function drawMatrixFromPixels(pixels, offset) {
  const cells = document.getElementsByClassName("led-cell");
  for (let row = 0; row < 8; row++) {
    for (let col = 0; col < 8; col++) {
      const pixel = pixels[row][col + offset] || 0;
      const idx = row * 8 + col;
      cells[idx].style.backgroundColor = pixel ? "#4CAF50" : "#333";
    }
  }
}

// 매트릭스 초기화 함수 (모든 LED 끄기)
function clearMatrix() {
  const cells = document.getElementsByClassName("led-cell");
  for (let i = 0; i < cells.length; i++) {
    cells[i].style.backgroundColor = "#333"; // 꺼진 색상
  }
}

let animationId = null;

// 자연스럽게 흐르는 애니메이션
function startScrollingTextOnWebMatrix(text, speed = 150) {
  if (animationId) clearInterval(animationId);

  const pixels = textToPixels(text);
  let offset = 0;
  const maxOffset = pixels[0].length - 8;

  animationId = setInterval(() => {
    drawMatrixFromPixels(pixels, offset);
    offset++;
    if (offset > maxOffset) {
      clearInterval(animationId);
      animationId = null;
      clearMatrix();  // 애니메이션 종료 후 매트릭스 초기화 호출
    }
  }, speed);
}

// 8x8 매트릭스 생성
function createMatrix() {
  const matrixContainer = document.getElementById("matrix");
  for (let i = 0; i < 64; i++) {
    const cell = document.createElement("div");
    cell.className = "led-cell";
    matrixContainer.appendChild(cell);
  }
}
createMatrix();

// Firebase 메시지 변경 감지 - 실제 Sense HAT가 읽는 용도
// 센서 데이터 변경 감지 (복수 필드 한번에 받는다고 가정)
database.ref('sensor').on('value', function(snapshot) {
  const data = snapshot.val();
  updateSensorInfo(data);
});
